<?php

/**
 * JCH Optimize - Performs several front-end optimizations for fast downloads
 *
 * @package   jchoptimize/core
 * @author    Samuel Marshall <samuel@jch-optimize.net>
 * @copyright Copyright (c) 2022 Samuel Marshall / JCH Optimize
 * @license   GNU/GPLv3, or later. See LICENSE file
 *
 *  If LICENSE file missing, see <http://www.gnu.org/licenses/>.
 */
namespace JchOptimize\Core\Model;

use FilesystemIterator;
use JchOptimize\Platform\Paths;
use Joomla\Filesystem\Folder;
use _JchOptimizeVendor\Laminas\Cache\Exception\ExceptionInterface;
use _JchOptimizeVendor\Laminas\Cache\Storage\FlushableInterface;
use _JchOptimizeVendor\Laminas\Cache\Storage\IterableInterface;
use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use function file_exists;
use function filesize;
use function floor;
use function in_array;
use function is_array;
use function iterator_count;
use function md5;
use function number_format;
use function pow;
use function sprintf;
use function strlen;
trait CacheModelTrait
{
    protected $size = 0;
    protected $numFiles = 0;
    public function getCacheSize() : array
    {
        if ($this->cache instanceof IterableInterface) {
            $this->getIterableCacheSize($this->cache);
        }
        if ($this->pageCacheStorage instanceof IterableInterface) {
            $this->getIterableCacheSize($this->pageCacheStorage);
        }
        //Iterate through the static files
        if (file_exists(Paths::cachePath(\false))) {
            $directory = new RecursiveDirectoryIterator(Paths::cachePath(\false), FilesystemIterator::SKIP_DOTS);
            $iterator = new RecursiveIteratorIterator($directory);
            $i = 0;
            foreach ($iterator as $file) {
                if (in_array($file->getFilename(), ['index.html', '.htaccess'])) {
                    $i++;
                    continue;
                }
                $this->size += $file->getSize();
            }
            $this->numFiles += iterator_count($iterator) - $i;
        }
        $decimals = 2;
        $sz = 'BKMGTP';
        $factor = (int) floor((strlen($this->size) - 1) / 3);
        $size = sprintf("%.{$decimals}f", $this->size / pow(1024, $factor)) . $sz[$factor];
        $numFiles = number_format($this->numFiles);
        return [$size, $numFiles];
    }
    /**
     * Cleans cache from the server
     *
     * @return bool
     */
    public function cleanCache() : bool
    {
        $success = \false;
        //Clean all cache generated by Storage
        if ($this->cache instanceof FlushableInterface) {
            $success |= $this->cache->flush();
        }
        //And page cache
        if ($this->pageCacheStorage instanceof FlushableInterface) {
            $success |= $this->pageCacheStorage->flush();
        } else {
            $success |= $this->pageCache->deleteAllItems();
        }
        //Also delete tags
        $this->taggableCache->flush();
        //Delete Cache dir
        try {
            Folder::delete(Paths::cacheDir());
        } catch (\Exception $e) {
            $success |= \false;
        }
        //Delete any static combined files
        try {
            if (file_exists(Paths::cachePath(\false))) {
                $success |= Folder::delete(Paths::cachePath(\false));
            }
        } catch (\Exception $e) {
            $success |= \false;
        }
        return $success;
    }
    private function getIterableCacheSize(IterableInterface $cache)
    {
        try {
            $iterator = $cache->getIterator();
            $this->numFiles += iterator_count($iterator);
            foreach ($iterator as $item) {
                //Let's skip the 'test' cache set on instantiation in container
                if ($item == md5('__ITEM__')) {
                    $this->numFiles -= 1;
                    continue;
                }
                $metaData = $cache->getMetadata($item);
                if (!is_array($metaData)) {
                    continue;
                }
                if (isset($metaData['size'])) {
                    $this->size += $metaData['size'];
                } else {
                    if (isset($metaData['filespec']) && file_exists($metaData['filespec'] . '.dat')) {
                        $this->size += filesize($metaData['filespec'] . '.dat');
                    }
                }
            }
        } catch (ExceptionInterface|\Exception $e) {
        }
    }
}
